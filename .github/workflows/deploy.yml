name: CI/CD Pipeline Deployment

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20 

      # Install dependencies
      - name: Install Dependencies
        run: |
          cd frontend
          npm install

      # Run tests
      #  name: Run Unit Tests
      #  run: npm test

      # Deploy manageExpenses Lambda Function
      - name: Deploy manageExpensesFunction
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          cd backend
          mkdir -p functions/manageExpensesPackage
          cp functions/manageExpenses.js functions/extractIds.js functions/manageExpensesPackage/
          cp -r node_modules functions/manageExpensesPackage/
          cd functions/manageExpensesPackage
          zip -r manageExpensesFunction.zip .
          aws lambda update-function-code \
            --function-name manageExpensesFunction \
            --zip-file fileb://manageExpensesFunction.zip \
            --region $AWS_REGION

      # Deploy manageUsers Lambda Function
      - name: Deploy manageUsersFunction
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          cd backend
          mkdir -p functions/manageUsersPackage
          cp functions/manageUsers.js functions/extractIds.js functions/manageUsersPackage/
          cp -r node_modules functions/manageUsersPackage/
          cd functions/manageUsersPackage
          zip -r manageUsersFunction.zip .
          aws lambda update-function-code \
            --function-name manageUsersFunction \
            --zip-file fileb://manageUsersFunction.zip \
            --region $AWS_REGION

      # Deploy SendEmail Lambda Function
      - name: Deploy sendEmailFunction
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          cd backend
          cd functions
          mkdir sendEmailPackage
          cp sendEmail.js sendEmailPackage/
          cd sendEmailPackage
          zip -r sendEmailFunction.zip .
          aws lambda update-function-code \
            --function-name sendEmailFunction \
            --zip-file fileb://sendEmailFunction.zip \
            --region $AWS_REGION

      # Deploy Frontend (S3 + CloudFront)
      - name: Deploy Frontend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: |
          cd frontend

          echo "REACT_APP_USER_POOL_ID=${{ secrets.REACT_APP_USER_POOL_ID }}" >> .env
          echo "REACT_APP_CLIENT_ID=${{ secrets.REACT_APP_CLIENT_ID }}" >> .env
          echo "REACT_APP_REGION=${{ secrets.REACT_APP_REGION }}" >> .env

          npm install
          npm run build
          aws s3 sync ./build s3://$S3_BUCKET --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"